"""
Django settings for student_api project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import logging
import datetime
from datetime import timedelta
from django.conf import settings

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=(h+#5vg8q0#)74)^tu6uahm(u@bu$#d2cvb_ylci*2bfau9xj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = "SERVER_DEBUG" in os.environ and os.environ["SERVER_DEBUG"].lower() == "true"

ALLOWED_HOSTS = [os.environ["SERVER_ALLOWED_HOSTS"], 'localhost']
HTTP = os.environ["SERVER_REQUST_METHOD_HTTP"]


DATA_UPLOAD_MAX_MEMORY_SIZE = 429916160  # your size limit in bytes
DATA_UPLOAD_MAX_NUMBER_FIELDS = None

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    #'channels',
    'corsheaders',
    'storages',

    # Token authentication
    'rest_framework.authtoken',
   
    # Apps
    'device_management',

    # MQTT
    #'django_mqtt',
    #'django_mqtt.mosquitto.auth_plugin',
    #'django_mqtt.publisher',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'request_id.middleware.RequestIdMiddleware',
    #'request_logging.middleware.LoggingMiddleware',
    'Middlewares.token_validation_middleware.TokenValidationMiddleware',
]



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#The Hasher I am using
PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.MD5PasswordHasher',
)

CORS_ORIGIN_ALLOW_ALL = True

AUTH_USER_MODEL = 'device_management.Admin'

# HTTP = os.environ["SERVER_REQUST_METHOD_HTTP"]
# JWKS = os.environ["JWKS"]
# ISS = os.environ["ISS"]
# AUDIENCE = os.environ["AUDIENCE"]
# FILE_S3_PREFIX = S3_BASE_URL + AWS_STORAGE_BUCKET_NAME + '/'


ROOT_URLCONF = 'digital_signage.urls'
# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ["DB_NAME"],
        'USER': os.environ["DB_USERNAME"],
        'PASSWORD': os.environ["DB_PASS"],
        'HOST': os.environ["DB_HOST"],
    }
}
# EMAIL_HOST = os.environ["EMAIL_HOST"]
# EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
# EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True

# MQTT settings
#MQTT_CERTS_ROOT = os.path.join(BASE_DIR, 'private')
# Used for 'django_mqtt' if 'django_mqtt.mosquitto.auth_plugin' is Installed
# Optional MQTT_ACL_ALLOW indicated if must allow topic not asigned for the user 
#MQTT_ACL_ALLOW = False
# Optional MQTT_ACL_ALLOW_ANONIMOUS indicated if must allow topic not valid users
#MQTT_ACL_ALLOW_ANONIMOUS = MQTT_ACL_ALLOW


WSGI_APPLICATION = 'digital_signage.wsgi.application'
ASGI_APPLICATION = 'digital_signage.routing.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('0.0.0.0', 6379)],
        },
    },
}
CACHE_TTL = 60 * 15
#SESSION_COOKIE_SECURE = True
#SESSION_SAVE_EVERY_REQUEST = True
# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

#REQUEST_ID_HEADER = None

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
#STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:6379/1".format(os.environ['CACHE_SERVER']),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': settings.SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


DEBUG = True
if DEBUG:
    LOG_FILENAME = os.environ['LOGFILE_NAME']

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        # "filters": {
        #     "request_id": {
        #         "()": "request_id.logging.RequestIdFilter"
        #     }
        # },
        'formatters': {
            'detailed': {
                'datefmt': '%Y-%m-%d %H:%M:%S %Z',
                #'format': '%(asctime)s - %(levelname)s - %(name)s - request_id:%(request_id)s -  [%(filename)s:%(lineno)d] - message:%(message)s '
            },

            'simple': {
                'datefmt': '%Y-%m-%d %H:%M:%S',
                'format': '%(asctime)s %(levelname)s %(name)s %(message)s'
            },},

        'handlers': {
            'file': {
                'level': 'DEBUG',
                'formatter': 'detailed',
                'class': 'logging.FileHandler',
                'filename': LOG_FILENAME,
                #"filters": ["request_id"],
            },
        },

        'loggers': {
            '': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': False,
            },
            'botocore': {
                'handlers': ['file'],
                'level': 'WARNING',
                'propagate': True,
            },
        },
    }

    REQUEST_LOGGING_SENSITIVE_HEADERS = ['HTTP_AUTHORIZATION', 'HTTP_USER_AGENT']
    REQUEST_LOGGING_HTTP_4XX_LOG_LEVEL=logging.INFO
    REQUEST_LOGGING_ENABLE_COLORIZE=False


# LOGGING = {
#     'version': 1,
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         }
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#         }
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#         }
#     }
# }
