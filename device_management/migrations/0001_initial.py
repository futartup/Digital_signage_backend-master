# Generated by Django 2.1.7 on 2020-09-21 16:23

import datetime
import device_management.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('last_login', models.DateTimeField(null=True)),
                ('archived_on', models.DateTimeField(blank=True, null=True)),
                ('restored_on', models.DateTimeField(blank=True, null=True)),
                ('organization_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Organization Name')),
                ('topic', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.BooleanField(blank=True, default=False, null=True)),
                ('added_on', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('removed_on', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('modified_on', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Given name to the device')),
                ('callback_message', models.CharField(blank=True, max_length=50, null=True, verbose_name='Message from device onboard')),
                ('belongs_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=100, unique=True)),
                ('added_on', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('modified_on', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('belongs_to', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('device', models.ManyToManyField(blank=True, null=True, to='device_management.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.BooleanField(blank=True, default=False, null=True)),
                ('added_on', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('removed_on', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('video', models.FileField(upload_to=device_management.models.user_directory_path)),
                ('thumbnail', models.FileField(upload_to=device_management.models.thumbnail_user_directory_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('play_from', models.DateTimeField(blank=True, null=True)),
                ('play_to', models.DateTimeField(blank=True, null=True)),
                ('belongs_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('device', models.ManyToManyField(blank=True, null=True, to='device_management.Device')),
            ],
        ),
        migrations.AddField(
            model_name='playlist',
            name='video',
            field=models.ManyToManyField(blank=True, null=True, to='device_management.Video'),
        ),
    ]
